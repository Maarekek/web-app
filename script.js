const placesData = {
  sports: [
    {
      name: "Skeittipuisto Purple Park",
      coords: [60.1557, 24.9381],
      description: "Loistava paikka skeittaukseen ja BMX-py√∂r√§ilyyn.",
      info: `
          Ponke's Park on moderni skeittipuisto Eirassa.
         Osoite: Merisatamanranta 10, 00150 Helsinki.
        Skeittipuisto Purple Park on suosittu ulkoilupuisto skeittaajille ja BMX-harrastajille Helsingiss√§. 
        Puisto tarjoaa modernit rampit ja esteet kaiken tasoisille k√§ytt√§jille. 
        Se sijaitsee meren √§√§rell√§ Eiranrannassa ja houkuttelee erityisesti nuoria liikkujia. 
        Alueella on my√∂s oleskelutiloja ja hyv√§ n√§kyvyys turvallisuuden takaamiseksi. 
        Purple Park tunnetaan yhteis√∂llisest√§ ilmapiirist√§√§n ja urbaanista tunnelmastaan.
      `,
      images: [
        "images/sport/SKEITTIPUISTO/skeittipuisto1.png",
        "images/sport/SKEITTIPUISTO/skeittipuisto2.png",
        "images/sport/SKEITTIPUISTO/skeittipuisto3.png",
        "images/sport/SKEITTIPUISTO/skeittipuisto4.png"
      ]
    },
    
      {
        name: "Urhea Olympic Training Centre",
        coords: [60.199772986942136, 24.949613799999998],
        description: "Koripallo, lentopallo ja muuta liikuntaa.",
        info: `
          Urhea Olympic Training Centre on moderni huippu-urheilukeskus Kalliossa.
          Osoite: M√§kel√§nkatu 47, 00550 Helsink
        Urhea Olympiakoulutuskeskus on moderni urheilukeskus Helsingiss√§, joka tarjoaa huippuluokan valmennus- ja harjoitusmahdollisuuksia. 
        Keskus palvelee olympiaurheilijoita ja muita huippu-urheilijoita eri lajien valmennuksessa. 
        Tilat sis√§lt√§v√§t mm. kuntosaleja, uintialtaan ja monipuoliset harjoitustilat. 
        Urhealla on my√∂s edistykselliset urheilul√§√§ketieteelliset palvelut ja asiantunteva henkil√∂kunta.
         Se on keskeinen osa Suomen urheiluj√§rjestelm√§√§ ja tukee urheilijoiden kansainv√§list√§ menestyst√§.`,
        images: [
          "images/sport/OLYMPIC/olympic1.png",
          "images/sport/OLYMPIC/olympic2.png",
          "images/sport/OLYMPIC/olympic3.png",
          "images/sport/OLYMPIC/olympic4.png",
          
        ]
      },
    ],
    food: [
      {
        name: "Ravintola Palace",
        coords: [60.1648, 24.9495],
        description: "Rooftop Bar in Helsinki.",
        info: `
          üçΩÔ∏è Ravintola Palace on yksi Helsingin tunnetuimmista ravintoloista, joka tarjoaa upeita merin√§k√∂aloja ja herkullista ruokaa.
          üìç Osoite: Etel√§ranta 10, 00130 Helsinki.
        `,
        telephone: "+358 9 1234567",
        webpage: "https://www.ravintolapalace.fi/",
        openingHours: "Ma-Pe 11-22, La 12-22, Su 12-20",
        images: [
          "images/food/PALACE/palace1.png",
          "images/food/PALACE/palace2.png",
          "images/food/PALACE/palace3.png",
        ]
      },
      {
        name: "Ravintola Brasa",
        coords: [60.173, 24.95],
        description: "Ravintola - Bar - Terassi.",
        info : `
          üçΩÔ∏è Ravintola Brasa on tunnettu ravintola Helsingiss√§, joka tarjoaa herkullista ruokaa ja rentoa tunnelmaa n/.
          üìç Osoite: Aleksanterinkatu 22, 00170 Helsinki.
        `,
        telephone: "+358 9 6128 3000",
        webpage: "https://www.brasa.fi/",
        openingHours: "Ma-La 11-22, Su 12-20",
        images: [
          "images/food/BRASA/brasa1.png",
          "images/food/BRASA/brasa2.png",
          "images/food/BRASA/brasa3.png",
          "images/food/BRASA/brasa4.png",
        ]
      },
      {
        name: "Ravintola Emo",
        coords: [60.1634, 24.9481],
        description: "Modern European cuisine with Nordic influences.",
        info: `
          üçΩÔ∏è Ravintola Emo on moderni ravintola Helsingiss√§, joka tarjoaa herkullista eurooppalaista ruokaa pohjoismaisilla vaikutteilla.
          üìç Osoite: Kasarmikatu 44, 00130 Helsinki.
        `,
        telephone: "+358 9 6128 3000",
        webpage: "https://www.emo.fi/",
        openingHours: "Ma-La 11-22, Su ferm√©",
        images: [
          "images/Food/EMO/emo1.png",
          "images/Food/EMO/emo2.png",
          "images/Food/EMO/emo3.png",
        ]
      },
    ],
    culture: [
      {
        name: "Art Museum Ateneum",
        coords: [60.170249993878514, 24.94407921349342],
        description: "Pysyv√§ taiden√§yttely ja vaihtuvia n√§yttelyit√§.",
        info: `Ateneum is an art museum in Helsinki, Finland and one of the three museums forming the Finnish National Gallery.
        It is located in the centre of Helsinki on the south side of Rautatientori square close to Helsinki Central railway station. 
        It has the biggest collections of classical art in Finland.`,
        images: ["images/culture/ATENEUM/ateneum1.png",
        "images/culture/ATENEUM/ateneum2.png",
        "images/culture/ATENEUM/ateneum3.png",
        "images/culture/ATENEUM/ateneum4.png",
        "images/culture/ATENEUM/ateneum5.png",
      ]
    },
    {
      name: "Paradox Museum",
        coords: [60.16855385825461, 24.94956917116448],
        description: "Pysyv√§ taiden√§yttely ja vaihtuvia n√§yttelyit√§.",
        info: `Paradox Museum Helsinki on interaktiivinen n√§yttelytila, jossa yli 40 k√§den kosketeltavaa teosta viev√§t k√§vij√§n tutkimaan havaintoihin, illuusioihin ja paradokseihin liittyvi√§ ilmi√∂it√§.
         Museo sopii kaikenik√§isille ja yhdistelee viihdytt√§vi√§ sek√§ opetuksellisia elementtej√§, jotka stimuloivat sek√§ mielikuvitusta ett√§ kriittist√§ ajattelua.
          Vierailijat voivat tutkia optisia harhoja, osallistua aktivoiviin installaatioihin ja ottaa vaikuttavia valokuvia ainutlaatuisten perspektiivien keskell√§.
           Paradox Museum Helsinki tarjoaa unohtumattoman kokemuksen, jossa todellisuuden ja illuusion rajat h√§m√§rtyv√§t ja mielen normit haastetaan.`,
        images: ["images/culture/PARADOX/paradox1.png",
        "images/culture/PARADOX/paradox2.png",
        "images/culture/PARADOX/paradox3.png",
        "images/culture/PARADOX/paradox4.png",
      ]
    },
  ],
};
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function detectLanguage() {
  const lang = navigator.language || navigator.userLanguage;
  if (lang.startsWith('fi')) {
    return 'fi';
  }
  // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –Ω–æ –ø–æ –∑–∞–¥–∞—á–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en
  return 'en';
}

let currentLang = detectLanguage();
// dalwe idet baza karti (no delete) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
let userLocation = [60.1711, 24.9427];
let map;
let currentMarkers = [];

window.onload = () => {
  map = L.map("map").setView(userLocation, 13);

  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "¬© OpenStreetMap"
  }).addTo(map);

// –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
function smoothScrollTo(targetY, duration = 1000) {
  const startY = window.pageYOffset;
  const distance = targetY - startY;
  let startTime = null;


  function easeInOutQuad(t, b, c, d) {
    t /= d/2;
    if (t < 1) return c/2*t*t + b;
    t--;
    return -c/2 * (t*(t-2) - 1) + b;
  }

  function animation(currentTime) {
    if (!startTime) startTime = currentTime;
    const timeElapsed = currentTime - startTime;
    const nextY = easeInOutQuad(timeElapsed, startY, distance, duration);
    window.scrollTo(0, nextY);
    if (timeElapsed < duration) {
      requestAnimationFrame(animation);
    }
  }

  requestAnimationFrame(animation);
}

document.querySelectorAll("button[data-category]").forEach(btn => {
  btn.addEventListener("click", () => {
    const category = btn.getAttribute("data-category");
    showPlaces(category);

    const mapEl = document.getElementById("map");
    const offset = -50; 
    const targetY = mapEl.getBoundingClientRect().top + window.pageYOffset + offset;

    smoothScrollTo(targetY, 1000);
  });
});

};

function getDistanceKm(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat / 2) ** 2 +
            Math.cos(lat1 * Math.PI / 180) *
            Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) ** 2;
  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}

function showPlaces(category) {
  document.getElementById("back-button").style.display = "inline-block";
  closePanel();

  currentMarkers.forEach(marker => map.removeLayer(marker));
  currentMarkers = [];

  const nearbyPlaces = placesData[category].filter(place =>
    getDistanceKm(userLocation[0], userLocation[1], place.coords[0], place.coords[1]) <= 15
  );

  const bounds = [];

  nearbyPlaces.forEach(place => {
    const marker = L.marker(place.coords).addTo(map);
    marker.bindTooltip(`<strong>${place.name}</strong><br>${place.description}`, {
      permanent: true,
      direction: 'top',
      offset: [0, -15]
    });
    marker.on('click', () => showInfoPanel(place));
    currentMarkers.push(marker);
    bounds.push(place.coords); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è fitBounds
  });

  if (bounds.length > 0) {
    map.fitBounds(bounds, { padding: [50, 50] });
    setTimeout(() => map.invalidateSize(), 300);
  }
}


function showInfoPanel(place) {
  const panel = document.getElementById("info-panel");
  const content = document.getElementById("info-content");

  // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç—å –µ—ë
  if (panel.classList.contains("open")) {
    panel.classList.remove("open");

    // –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å CSS transition-duration)
    setTimeout(() => {
      updatePanelContent(place, content, panel);
    }, 300); // 300 –º—Å –∫–∞–∫ –≤ transition
  } else {
    updatePanelContent(place, content, panel);
  }
}

function updatePanelContent(place, content, panel) {
  let html = `<h2>${place.name}</h2><p><em>${place.description}</em></p>`;
  if (place.info) {
    html += `<p>${place.info}</p>`;
  }
  if (place.images) {
    html += place.images.map(img => `<img src="${img}" alt="${place.name}" />`).join("");
  }

  content.innerHTML = html;
  panel.classList.add("open");
}
// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ (–æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ—Ç)
let isPanelOpen = false;

function updatePanelContent(place, content, panel) {
  let html = `<h2>${place.name}</h2><p><em>${place.description}</em></p>`;
  if (place.info) {
    html += `<p>${place.info}</p>`;
  }
  if (place.images) {
    html += place.images.map(img => `<img src="${img}" alt="${place.name}" />`).join("");
  }

  content.innerHTML = html;
  panel.classList.add("open");
  isPanelOpen = true; // –ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
}

// –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
function closePanel() {
  document.getElementById("info-panel").classList.remove("open");
  isPanelOpen = false; // –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
document.addEventListener("click", function (event) {
  const panel = document.getElementById("info-panel");
  const isClickInsidePanel = panel.contains(event.target);
  const isClickOnMarker = event.target.closest(".leaflet-marker-icon"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É

  // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –º–∞—Ä–∫–µ—Ä—É –∏ –Ω–µ –ø–æ –ø–∞–Ω–µ–ª–∏, –∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
  if (isPanelOpen && !isClickInsidePanel && !isClickOnMarker) {
    closePanel();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
function showInfoPanel(place) {
  const panel = document.getElementById("info-panel");
  const content = document.getElementById("info-content");

  // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–µ–º –µ—ë, –∞ –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–µ–º —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  if (panel.classList.contains("open")) {
    closePanel();
    setTimeout(() => {
      updatePanelContent(place, content, panel);
    }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  } else {
    updatePanelContent(place, content, panel);
  }
}

// –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function showPlaces(category) {
  document.getElementById("back-button").style.display = "inline-block";
  closePanel();

  currentMarkers.forEach(marker => map.removeLayer(marker));
  currentMarkers = [];

  const nearbyPlaces = placesData[category].filter(place =>
    getDistanceKm(userLocation[0], userLocation[1], place.coords[0], place.coords[1]) <= 15
  );

  nearbyPlaces.forEach(place => {
    const marker = L.marker(place.coords).addTo(map);
    marker.bindTooltip(`<strong>${place.name}</strong><br>${place.description}`, {
      permanent: true,
      direction: 'top',
      offset: [0, -15]
    });
    marker.on('click', () => showInfoPanel(place));
    currentMarkers.push(marker);
  });

  if (nearbyPlaces.length) {
    map.setView(nearbyPlaces[0].coords, 13);
    setTimeout(() => map.invalidateSize(), 300);
  }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
function closePanel() {
  document.getElementById("info-panel").classList.remove("open");
}

// –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
document.getElementById("close-panel-btn").addEventListener("click", closePanel);



